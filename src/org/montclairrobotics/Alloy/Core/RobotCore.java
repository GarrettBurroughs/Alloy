package org.montclairrobotics.Alloy.Core;

import com.qualcomm.robotcore.hardware.Gamepad;
import com.qualcomm.robotcore.hardware.HardwareMap;
import org.firstinspires.ftc.robotcore.external.Telemetry;

/**
 * Created by MHS Robotics on 12/5/2017.
 *
 * Since essential parts to the robots operation are stored in OpMode
 * @see com.qualcomm.robotcore.eventloop.opmode.OpMode
 * The robot core class creates static instances of all of the essentail objects on initialization
 * The actual objects are passed in in the Alloy class
 * @see Alloy
 * With this, the user can acess all of the objects throughout the project.
 *
 * @author Garrett Burroughs
 * @version 0.1
 * @since 0.1
 *
 */
public class RobotCore {
    /**
     * Telemetry is used for reading out information on the phones and is useful for debugging,
     * The telemetry is also used in Debug
     * @see Debug
     */
    public static Telemetry telemetry;

    /**
     * The hardware map is essential to any robot and is how the FTC core interacts with the hardware devices
     * on the phones
     */
    public static HardwareMap hardwareMap;

    /**
     * The first gamepad, generated by pressing start + 'a' on the controller
     */
    public static Gamepad gamepad1;
    /**
     * The second gamepad, generated by pressing start + 'b' on the controller
     */
    public static Gamepad gamepad2;

    public RobotCore(Telemetry telemetry, HardwareMap hardwareMap, Gamepad gamepad1, Gamepad gamepad2) {
        //Instantiate all static instances
        this.telemetry   = telemetry;
        this.hardwareMap = hardwareMap;
        this.gamepad1   = gamepad1;
        this.gamepad2   = gamepad2;
    }

    /**
     * Gets the hardware map of the robot
     *
     * @return the hardware map
     */
    public static HardwareMap getHardwareMap(){
        return hardwareMap;
    }

    /**
     * Gets the telemetry object of the robot
     *
     * @return telemetry
     */
    public static Telemetry getTelemetry() {
        return telemetry;
    }

    /**
     * Gets the first gamepad
     *
     * @return gamepad1
     */
    public static Gamepad getGamepad1() {
        return gamepad1;
    }

    /**
     * Gets the second gamepad
     *
     * @return gamepad1
     */
    public static Gamepad getGamepad2() {
        return gamepad2;
    }
}
